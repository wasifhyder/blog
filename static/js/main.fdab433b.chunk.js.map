{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TabPane","Tabs","callback","key","console","log","window","_","data","habit","Meditation","Migraine","Awake","Reading","Gym","Dancing","Tracker","_ref","forItem","react_default","a","createElement","align","Paragraph","className","keys","map","index","App_MyResponsiveCalendar","inputRef","title","MyResponsiveCalendar","_ref2","habitData","_useState","useState","_useState2","Object","slicedToArray","setData","nivo_calendar_esm","direction","yearLegend","transform","from","to","emptyColor","colors","margin","top","right","bottom","left","yearSpacing","monthBorderColor","dayBorderWidth","dayBorderColor","onClick","day","updateHabit","isInteractive","update","result","val","value","App","Grommet","full","src","alt","style","width","height","Heading","tabs","defaultActiveKey","onChange","tab","App_Tracker","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdab433b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport _ from \"lodash\";\nimport { Grommet, Heading, Paragraph } from \"grommet\";\nimport { ResponsiveCalendar } from \"@nivo/calendar\";\nimport { Tabs } from 'antd';\nimport myData from \"./data.json\";\nimport \"./App.scss\";\n\nconst { TabPane } = Tabs;\n\nwindow._ = _;\n\nfunction callback(key) {\n  console.log(key);\n}\n\n\n// Habit Data Structure\nwindow.data = {\n  habit: {\n    Meditation: {},\n    Migraine: {},\n    Awake: {},\n    Reading: {},\n    Gym: {},\n    Dancing: {}\n  }\n};\n\n\nfunction App() {\n  return (\n    <Grommet className=\"App\" full>\n      {/* Image */}\n      <img className=\"App-image\" src=\"art.png\" alt=\"something\" />\n      <span\n        className=\"transparent\"\n        style={{\n          width: \"750px\",\n          height: \"750px\",\n          top: \"-250px\",\n          right: \"-220px\"\n        }}\n      />\n\n      {/* Header */}\n      <div className=\"App-header\">\n        <Heading className=\"App-logo\" margin=\"none\">\n          Wasif Hyder\n        </Heading>\n        <Paragraph className=\"App-subheading\">\n          Artist / Designer / Developer\n        </Paragraph>\n      </div>\n\n    <div className=\"App-content\">\n      <Tabs defaultActiveKey=\"1\" onChange={callback}>\n        <TabPane tab=\"Year\" key=\"1\">\n          <Tracker forItem=\"Migraine\" />\n        </TabPane>\n        <TabPane tab=\"Month\" key=\"2\">\n          Content of Tab Pane 2\n        </TabPane>\n      </Tabs>\n    </div>\n      \n    </Grommet>\n  );\n}\n\nconst Tracker = ({ forItem }) => {\n  return (\n    <div align=\"left\">\n      <Paragraph>Experimental Habit Tracker</Paragraph>\n\n      {/* Calendar */}\n      <div className=\"calendar-group\">\n        {_.keys(window.data.habit).map((habit, index) => {\n          return (\n            <MyResponsiveCalendar\n              inputRef={index}\n              key={index}\n              title={habit}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst MyResponsiveCalendar = ({ title }) => {\n  let habitData = window.data.habit[title];\n  const [data, setData] = useState({ data: habitData });\n\n  return (\n    <div className=\"calendar\">\n      <ResponsiveCalendar\n        direction=\"vertical\"\n        align=\"left\"\n        yearLegend={() => title}\n        data={transform(data.data)}\n        from=\"2019-01-01\"\n        to=\"2019-12-31\"\n        emptyColor=\"#eeeeee\"\n        colors={[\"#61cdbb\", \"#97e3d5\", \"#e8c1a0\", \"#f47560\"]}\n        margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n        yearSpacing={40}\n        monthBorderColor=\"#ffffff\"\n        dayBorderWidth={2}\n        dayBorderColor=\"#ffffff\"\n        onClick={(day, _) => updateHabit(data, day.day, setData)}\n        isInteractive={true}\n        // tooltip={(day, e) => day.day + \" | \" + data.data[day.day].value}\n      />\n    </div>\n  );\n};\n\n// Update the habit data\nconst updateHabit = (data, day, update) => {\n  let result = data.data;\n  let val = ((result[day] && result[day].value) || 0) % 5;\n\n  result[day] = { value: val + 1 };\n  update({ data: result });\n};\n\n// Appendix\n\n// Transform data into a valid format\n// - { \"2019-01-01\": {\"value\": 1}} => [{\"day\": \"2019-01-01\", \"value\": 1}, ...]\nconst transform = data =>\n  _.keys(data).map(key => {\n    return {\n      day: key,\n      value: data[key].value\n    };\n  });\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}