{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["window","_","transform","data","keys","map","key","day","value","habit","Migraine","Meditation","Awake","Reading","Gym","Dancing","MyResponsiveCalendar","_ref","title","habitData","_useState","useState","_useState2","Object","slicedToArray","setData","react_default","a","createElement","className","nivo_calendar_esm","direction","align","yearLegend","from","to","emptyColor","colors","margin","top","right","bottom","left","yearSpacing","monthBorderColor","dayBorderWidth","dayBorderColor","onClick","updateHabit","isInteractive","tooltip","e","update","result","val","App","habits","Grommet","src","alt","style","width","height","Heading","Paragraph","Box","Tabs","Tab","index","App_MyResponsiveCalendar","inputRef","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sWAWAA,OAAOC,EAAIA,IAGX,IAAMC,EAAY,SAACC,GAAD,OAAUF,IAAEG,KAAKD,GAAME,IAAI,SAAAC,GAC3C,MAAO,CACLC,IAAOD,EACPE,MAASL,EAAKG,GAAKE,UAIvBR,OAAOE,UAAYA,EAEnBF,OAAOG,KAAO,CACZM,MAAS,CACPC,SAAY,GACZC,WAAc,GACdC,MAAS,GACTC,QAAW,GACXC,IAAO,GACPC,QAAW,KAuCf,IAAMC,EAAuB,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MACxBC,EAAYnB,OAAOG,KAAKM,MAAMS,GADME,EAEhBC,mBAAS,CAAClB,KAAQgB,IAFFG,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEjCjB,EAFiCmB,EAAA,GAE3BG,EAF2BH,EAAA,GAIxC,OAAOI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACpBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,UAAU,WACVC,MAAM,OACNC,WAAY,kBAAKf,GACjBf,KAAMD,EAAUC,EAAKA,MACrB+B,KAAK,aACLC,GAAG,aACHC,WAAW,UACXC,OAAQ,CAAE,UAAW,UAAW,UAAW,WAC3CC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDC,YAAa,GACbC,iBAAiB,UACjBC,eAAgB,EAChBC,eAAe,UACfC,QAAS,SAACxC,EAAKN,GAAN,OAAY+C,EAAY7C,EAAMI,EAAIA,IAAKkB,IAChDwB,eAAe,EACfC,QAAS,SAAC3C,EAAK4C,GAAN,OAAY5C,EAAIA,IAAM,MAAQJ,EAAKA,KAAKI,EAAIA,KAAKC,WAM9DwC,EAAc,SAAC7C,EAAMI,EAAK6C,GAC9B,IAAIC,EAASlD,EAAKA,KACdmD,GAAOD,EAAO9C,IAAQ8C,EAAO9C,GAAKC,OAAS,GAAK,EAEpD6C,EAAO9C,GAAO,CAACC,MAAW8C,EAAM,GAChCF,EAAO,CAACjD,KAAMkD,KAIDE,EAvEf,WACE,IAAIC,EAASvD,IAAEG,KAAKJ,OAAOG,KAAKM,OAEhC,OACIiB,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAS5B,UAAU,OAEjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAY6B,IAAI,UAAUC,IAAI,cAC7CjC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAc+B,MAAO,CAACC,MAAO,QAASC,OAAQ,QAASvB,IAAK,SAAUC,MAAO,YAG7Fd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAASlC,UAAU,WAAWS,OAAO,QAArC,eACAZ,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAWnC,UAAU,kBAArB,kCAGFH,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAKjC,MAAM,QACTN,EAAAC,EAAAC,cAACoC,EAAA,EAAD,mCACAtC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACExC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAKjD,MAAM,UAETQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACT2B,EAAOnD,IAAI,SAACI,EAAO2D,GACjB,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,CAAsBC,SAAUF,EAAO9D,IAAK8D,EAAOlD,MAAOT,QAK3EiB,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAKjD,MAAM,gBCjDHqD,QACW,cAA7BvE,OAAOwE,SAASC,UAEe,UAA7BzE,OAAOwE,SAASC,UAEhBzE,OAAOwE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.91130489.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Grommet, Heading, Paragraph, Box, Tab, Tabs } from 'grommet';\nimport { ResponsiveCalendar } from '@nivo/calendar'\nimport _ from 'lodash';\n\n// JSON\nimport myData from './data.json';\n\n// CSS\nimport './App.css';\n\nwindow._ = _\n\n// Transform data into a valid format\nconst transform = (data) => _.keys(data).map(key => { \n  return {\n    'day': key,\n    'value': data[key].value\n  }\n})\n\nwindow.transform = transform\n\nwindow.data = {\n  'habit': {\n    'Migraine': {},\n    'Meditation': {},\n    'Awake': {},\n    'Reading': {},\n    'Gym': {},\n    'Dancing': {},\n  }\n}\n\nfunction App() {\n  let habits = _.keys(window.data.habit) \n\n  return (\n      <Grommet className=\"App\">\n        {/* Image */}\n        <img className=\"App-image\" src=\"art.png\" alt=\"something\"/>\n        <span className=\"transparent\" style={{width: \"750px\", height: \"750px\", top: \"-250px\", right: \"-220px\"}}></span>\n\n        {/* Header */}\n        <div className=\"App-header\">\n          <Heading className=\"App-logo\" margin=\"none\">Wasif Hyder</Heading> \n          <Paragraph className=\"App-subheading\">Artist / Designer / Developer</Paragraph> \n        </div>\n        \n        <Box align=\"left\">\n          <Paragraph>Experimental Habit Tracker</Paragraph> \n          <Tabs>\n            <Tab title=\"Yearly\">\n              {/* Calendar */}\n              <div className=\"calendar-group\">\n                  { habits.map((habit, index) => {\n                      return <MyResponsiveCalendar inputRef={index} key={index} title={habit}/>\n                    })\n                  }\n              </div>\n            </Tab>\n            <Tab title=\"Monthly\">\n            </Tab>\n          </Tabs>\n        </Box>\n      </Grommet>\n  );\n}\n\nconst MyResponsiveCalendar = ({ title }) => {\n    let habitData = window.data.habit[title]\n    const [data, setData] = useState({\"data\": habitData})\n\n    return <div className=\"calendar\">\n      <ResponsiveCalendar\n          direction=\"vertical\"\n          align=\"left\"\n          yearLegend={()=> title}\n          data={transform(data.data)}\n          from=\"2019-01-01\"\n          to=\"2019-12-31\"\n          emptyColor=\"#eeeeee\"\n          colors={[ '#61cdbb', '#97e3d5', '#e8c1a0', '#f47560' ]}\n          margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n          yearSpacing={40}\n          monthBorderColor=\"#ffffff\"\n          dayBorderWidth={2}\n          dayBorderColor=\"#ffffff\"\n          onClick={(day, _) => updateHabit(data, day.day, setData)}\n          isInteractive={true}\n          tooltip={(day, e) => day.day + \" | \" + data.data[day.day].value}\n      />\n    </div>\n}\n\n// Update the habit data\nconst updateHabit = (data, day, update) => {\n  let result = data.data\n  let val = (result[day] && result[day].value || 0) % 5\n\n  result[day] = {'value': ( val + 1 )}\n  update({data: result})\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}