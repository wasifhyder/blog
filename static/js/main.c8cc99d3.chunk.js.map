{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TabPane","Tabs","callback","key","console","log","window","_","data","habit","Meditation","Migraine","Awake","Reading","Gym","Dancing","getData","SleepChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","updateChart","date","offset","Date","parseTime","d3","formatHour","formatMonth","svg","margin","width","attr","height","g","append","x","rangeRound","y","domain","area","curve","d","day","y0","y1","tickFormat","tickSize","tickPadding","sleepData","map","asleep","awake","floor","date0","date1","length","selectAll","insert","datum","concat","0","1","_this2","react_default","a","createElement","className","ref","el","svgEl","React","Component","Tracker","_ref","forItem","align","Paragraph","keys","index","App_MyResponsiveCalendar","inputRef","title","MyResponsiveCalendar","_ref2","habitData","_useState","useState","_useState2","slicedToArray","setData","nivo_calendar_esm","direction","yearLegend","transform","from","to","emptyColor","colors","top","right","bottom","left","yearSpacing","monthBorderColor","dayBorderWidth","dayBorderColor","onClick","updateHabit","isInteractive","update","result","val","value","App","Grommet","full","src","alt","style","Heading","tabs","defaultActiveKey","onChange","tab","App_Tracker","App_SleepChart","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"87cAWQA,EAAYC,IAAZD,QAIR,SAASE,EAASC,GAChBC,QAAQC,IAAIF,GAHdG,OAAOC,EAAIA,IAOXD,OAAOE,KAAO,CACZC,MAAO,CACLC,WAAY,GACZC,SAAU,GACVC,MAAO,GACPC,QAAS,GACTC,IAAK,GACLC,QAAS,KA8Cb,IAAMC,EAAU,WACd,MAAO,IAGHC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXlB,KAAMQ,KAJSG,mFASjBG,KAAKK,2DAILL,KAAKK,oDAIL,IAMIC,EAAO,SAAAC,GACT,OAAO,IAAIC,KAAKD,IAGdE,EAAYC,IAAY,wBAC1BC,EAAaD,IAAa,aAC1BE,EAAcF,IAAa,MAEzBG,EAAMH,IAAU,gBAChBI,EAAgB,EAAhBA,EAA0B,EAA1BA,EAAqC,EAArCA,EAA8C,GAC9CC,EAAQF,EAAIG,KAAK,SAAWF,EAAcA,EAC1CG,EAASJ,EAAIG,KAAK,UAAYF,EAAaA,EAC3CI,EAAIL,EACLM,OAAO,KACPH,KAAK,YAAa,aAAeF,EAAc,IAAMA,EAAa,KAEjEM,EAAIV,MAAcW,WAAW,CAAC,EAAGN,IAEjCO,EAAIZ,MAELa,OAAO,CAACjB,EAAK,QAAeA,EAAK,WACjCe,WAAW,CAAC,EAAGJ,IAEdO,EAAOd,MAERe,MAAMf,KACNU,EAAE,SAASM,GACV,OAAON,EAAEM,EAAEC,OAEZC,GAAG,SAASF,GACX,OAAOJ,EAAEhB,EAAKoB,EAAE,GAAKA,EAAEC,QAExBE,GAAG,SAASH,GACX,OAAOJ,EAAEhB,EAAKoB,EAAE,GAAKA,EAAEC,QAG3BT,EAAEC,OAAO,KACNH,KAAK,QAAS,gBACdb,KACCO,IACYY,GACTQ,WAAWnB,GACXoB,UAAUhB,GACViB,YAAY,KAGnB,IAAI9C,EAAO+C,EAAUC,IApDV,SAAAR,GAGT,OAFAA,EAAI,CAACjB,EAAUiB,EAAES,QAAS1B,EAAUiB,EAAEU,SACpCT,IAAMjB,IAAU2B,MAAMX,EAAE,IACnBA,IAmDLY,EAAQpD,EAAK,GAAGyC,IAChBY,EAAQ7B,IAAUH,OAAOrB,EAAKA,EAAKsD,OAAS,GAAGb,IAAK,GACxD7C,QAAQC,IAAI,UAAWuD,GACvBxD,QAAQC,IAAI,UAAWwD,GAEvBnB,EAAEG,OAAO,CAACe,EAAOC,IAEjBrB,EAAEC,OAAO,KACNH,KAAK,QAAS,gBACdA,KAAK,YAAa,eAAiBC,EAAS,KAC5Cd,KACCO,IACcU,GACXU,WAAWlB,GACXmB,UAAUd,GACVe,aAAa,KAEjBS,UAAU,QACVzB,KAAK,cAAe,SACpBA,KAAK,IAAK,IACVA,KAAK,KAAM,MAEdE,EAAEwB,OAAO,OAAQ,SACdC,MAAMzD,EAAK0D,OAAO,CAAEjB,IAAKY,EAAOM,EAAG,EAAGC,EAAG,KACzC9B,KAAK,QAAS,QACdA,KAAK,IAAKQ,oCAGN,IAAAuB,EAAA/C,KACP,OACEgD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACVpC,MAAM,MACNE,OAAO,MACPmC,IAAK,SAAAC,GAAE,OAAKN,EAAKO,MAAQD,aA3GVE,IAAMC,WAkHzBC,EAAU,SAAAC,GAAiBA,EAAdC,QACjB,OACEX,EAAAC,EAAAC,cAAA,OAAKU,MAAM,QACTZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,mCAGAb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZlE,IAAE6E,KAAK9E,OAAOE,KAAKC,OAAO+C,IAAI,SAAC/C,EAAO4E,GACrC,OACEf,EAAAC,EAAAC,cAACc,EAAD,CAAsBC,SAAUF,EAAOlF,IAAKkF,EAAOG,MAAO/E,SAQhEgF,EAAuB,SAAAC,GAAe,IAAZF,EAAYE,EAAZF,MAC1BG,EAAYrF,OAAOE,KAAKC,MAAM+E,GADQI,EAElBC,mBAAS,CAAErF,KAAMmF,IAFCG,EAAA1E,OAAA2E,EAAA,EAAA3E,CAAAwE,EAAA,GAEnCpF,EAFmCsF,EAAA,GAE7BE,EAF6BF,EAAA,GAI1C,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEC,UAAU,WACVhB,MAAM,OACNiB,WAAY,kBAAMX,GAClBhF,KAAM4F,EAAU5F,EAAKA,MACrB6F,KAAK,aACLC,GAAG,aACHC,WAAW,UACXC,OAAQ,CAAC,UAAW,UAAW,UAAW,WAC1CpE,OAAQ,CAAEqE,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDC,YAAa,GACbC,iBAAiB,UACjBC,eAAgB,EAChBC,eAAe,UACfC,QAAS,SAAChE,EAAK1C,GAAN,OAAY2G,EAAY1G,EAAMyC,EAAIA,IAAK+C,IAChDmB,eAAe,MAOjBD,EAAc,SAAC1G,EAAMyC,EAAKmE,GAC9B,IAAIC,EAAS7G,EAAKA,KACd8G,GAAQD,EAAOpE,IAAQoE,EAAOpE,GAAKsE,OAAU,GAAK,EAEtDF,EAAOpE,GAAO,CAAEsE,MAAOD,EAAM,GAC7BF,EAAO,CAAE5G,KAAM6G,KAOXjB,EAAY,SAAA5F,GAAI,OACpBD,IAAE6E,KAAK5E,GAAMgD,IAAI,SAAArD,GACf,MAAO,CACL8C,IAAK9C,EACLoH,MAAO/G,EAAKL,GAAKoH,UAIRC,EAjOf,WACE,OACElD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAShD,UAAU,MAAMiD,MAAI,GAE3BpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYkD,IAAI,UAAUC,IAAI,cAC7CtD,EAAAC,EAAAC,cAAA,QACEC,UAAU,cACVoD,MAAO,CACLxF,MAAO,QACPE,OAAQ,QACRkE,IAAK,SACLC,MAAO,YAKXpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAASrD,UAAU,WAAWrC,OAAO,QAArC,eAGAkC,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAWV,UAAU,kBAArB,kCAKFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAMC,iBAAiB,IAAIC,SAAU/H,GACnCoE,EAAAC,EAAAC,cAACxE,EAAD,CAASkI,IAAI,OAAO/H,IAAI,KACtBmE,EAAAC,EAAAC,cAAC2D,EAAD,CAASlD,QAAQ,cAEnBX,EAAAC,EAAAC,cAACxE,EAAD,CAASkI,IAAI,QAAQ/H,IAAI,KAAzB,kCAEEmE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAC4D,EAAD,YCpDMC,QACW,cAA7B/H,OAAOgI,SAASC,UAEe,UAA7BjI,OAAOgI,SAASC,UAEhBjI,OAAOgI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c8cc99d3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport _ from \"lodash\";\nimport { Grommet, Heading, Paragraph } from \"grommet\";\nimport { ResponsiveCalendar } from \"@nivo/calendar\";\nimport { ResponsiveBar } from \"@nivo/bar\";\nimport { Tabs } from \"antd\";\nimport myData from \"./data.json\";\nimport sleepData from \"./bardata.json\";\nimport \"./App.scss\";\nimport * as d3 from \"d3\";\n\nconst { TabPane } = Tabs;\n\nwindow._ = _;\n\nfunction callback(key) {\n  console.log(key);\n}\n\n// Habit Data Structure\nwindow.data = {\n  habit: {\n    Meditation: {},\n    Migraine: {},\n    Awake: {},\n    Reading: {},\n    Gym: {},\n    Dancing: {}\n  }\n};\n\nfunction App() {\n  return (\n    <Grommet className=\"App\" full>\n      {/* Image */}\n      <img className=\"App-image\" src=\"art.png\" alt=\"something\" />\n      <span\n        className=\"transparent\"\n        style={{\n          width: \"750px\",\n          height: \"750px\",\n          top: \"-250px\",\n          right: \"-220px\"\n        }}\n      />\n\n      {/* Header */}\n      <div className=\"App-header\">\n        <Heading className=\"App-logo\" margin=\"none\">\n          Wasif Hyder\n        </Heading>\n        <Paragraph className=\"App-subheading\">\n          Artist / Designer / Developer\n        </Paragraph>\n      </div>\n\n      <div className=\"App-content\">\n        <Tabs defaultActiveKey=\"2\" onChange={callback}>\n          <TabPane tab=\"Year\" key=\"1\">\n            <Tracker forItem=\"Migraine\" />\n          </TabPane>\n          <TabPane tab=\"Month\" key=\"2\">\n            WIP: Have to add a todo section\n            <div className=\"sleep\">\n              <SleepChart />\n            </div>\n          </TabPane>\n        </Tabs>\n      </div>\n    </Grommet>\n  );\n}\n\nconst getData = () => {\n  return [];\n};\n\nclass SleepChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: getData()\n    };\n  }\n\n  componentDidMount() {\n    this.updateChart();\n  }\n\n  componentDidUpdate() {\n    this.updateChart();\n  }\n\n  updateChart() {\n    var type = d => {\n      d = [parseTime(d.asleep), parseTime(d.awake)];\n      d.day = d3.utcDay.floor(d[0]);\n      return d;\n    };\n\n    var date = offset => {\n      return new Date(offset);\n    };\n\n    var parseTime = d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%L\"),\n      formatHour = d3.utcFormat(\"%-I:%M %p\"),\n      formatMonth = d3.utcFormat(\"%B\");\n\n    let svg = d3.select(\".svg-element\");\n    let margin = { top: 0, right: 0, bottom: 0, left: 70 };\n    let width = svg.attr(\"width\") - margin.left - margin.right;\n    let height = svg.attr(\"height\") - margin.top - margin.bottom;\n    let g = svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    var x = d3.scaleUtc().rangeRound([0, width]);\n\n    var y = d3\n      .scaleUtc()\n      .domain([date(19.65 * 36e5), date(32.35 * 36e5)]) // about 7:40 PM to 8:20 AM\n      .rangeRound([0, height]);\n\n    var area = d3\n      .area()\n      .curve(d3.curveStepAfter)\n      .x(function(d) {\n        return x(d.day);\n      })\n      .y0(function(d) {\n        return y(date(d[0] - d.day));\n      })\n      .y1(function(d) {\n        return y(date(d[1] - d.day));\n      });\n\n    g.append(\"g\")\n      .attr(\"class\", \"axis axis--y\")\n      .call(\n        d3\n          .axisLeft(y)\n          .tickFormat(formatHour)\n          .tickSize(-width)\n          .tickPadding(10)\n      );\n\n    let data = sleepData.map(type);\n\n    let date0 = data[0].day;\n    let date1 = d3.utcDay.offset(data[data.length - 1].day, 1);\n    console.log(\"Date0: \", date0)\n    console.log(\"Date1: \", date1)\n\n    x.domain([date0, date1]);\n\n    g.append(\"g\")\n      .attr(\"class\", \"axis axis--x\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(\n        d3\n          .axisBottom(x)\n          .tickFormat(formatMonth)\n          .tickSize(-height)\n          .tickPadding(-10)\n      )\n      .selectAll(\"text\")\n      .attr(\"text-anchor\", \"start\")\n      .attr(\"x\", 10)\n      .attr(\"dy\", null);\n\n    g.insert(\"path\", \".axis\")\n      .datum(data.concat({ day: date1, 0: 0, 1: 0 })) // for step-after\n      .attr(\"class\", \"data\")\n      .attr(\"d\", area);\n  }\n\n  render() {\n    return (\n      <div className=\"charty\">\n        <svg\n          className=\"svg-element\"\n          width=\"960\"\n          height=\"500\"\n          ref={el => (this.svgEl = el)}\n        />\n      </div>\n    );\n  }\n}\n\nconst Tracker = ({ forItem }) => {\n  return (\n    <div align=\"left\">\n      <Paragraph>Experimental Habit Tracker</Paragraph>\n\n      {/* Calendar */}\n      <div className=\"calendar-group\">\n        {_.keys(window.data.habit).map((habit, index) => {\n          return (\n            <MyResponsiveCalendar inputRef={index} key={index} title={habit} />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst MyResponsiveCalendar = ({ title }) => {\n  let habitData = window.data.habit[title];\n  const [data, setData] = useState({ data: habitData });\n\n  return (\n    <div className=\"calendar\">\n      <ResponsiveCalendar\n        direction=\"vertical\"\n        align=\"left\"\n        yearLegend={() => title}\n        data={transform(data.data)}\n        from=\"2019-01-01\"\n        to=\"2019-12-31\"\n        emptyColor=\"#eeeeee\"\n        colors={[\"#61cdbb\", \"#97e3d5\", \"#e8c1a0\", \"#f47560\"]}\n        margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n        yearSpacing={40}\n        monthBorderColor=\"#ffffff\"\n        dayBorderWidth={2}\n        dayBorderColor=\"#ffffff\"\n        onClick={(day, _) => updateHabit(data, day.day, setData)}\n        isInteractive={false}\n      />\n    </div>\n  );\n};\n\n// Update the habit data\nconst updateHabit = (data, day, update) => {\n  let result = data.data;\n  let val = ((result[day] && result[day].value) || 0) % 5;\n\n  result[day] = { value: val + 1 };\n  update({ data: result });\n};\n\n// Appendix\n\n// Transform data into a valid format\n// - { \"2019-01-01\": {\"value\": 1}} => [{\"day\": \"2019-01-01\", \"value\": 1}, ...]\nconst transform = data =>\n  _.keys(data).map(key => {\n    return {\n      day: key,\n      value: data[key].value\n    };\n  });\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}